generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id
  name        String   @db.Char(30)
  username    String   @unique @db.Char(64)
  email       String   @unique
  imageUrl    String
  bannerUrl   String?
  location    String?  @db.Char(30)
  website     String?  @db.Char(100)
  isCompleted Boolean  @default(false)
  bio         String?  @db.Char(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  threads                 Thread[]
  followers               Follower[]     @relation("UserFollowers")
  followings              Follower[]     @relation("UserFollowing")
  likes                   Like[]
  bookmarks               Bookmark[]
  notifications           Notification[] @relation("UserNotifications")
  sourceUserNotifications Notification[] @relation("SourceUserNotifications")
  parentUserNotifications Notification[] @relation("ParentUserNotifications")

  @@index([username, name])
}

model Follower {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  user      User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId, followingId])
}

model Notification {
  id           String      @id @default(uuid())
  isRead       Boolean     @default(false)
  userId       String
  activityType ActionType?
  sourceId     String
  parentIdPost String?
  parentIdUser String?
  parentType   ParentType
  createdAt    DateTime    @default(now())
  user         User        @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  sourceUser   User        @relation("SourceUserNotifications", fields: [sourceId], references: [id], onDelete: Cascade)
  parentUser   User?       @relation("ParentUserNotifications", fields: [parentIdUser], references: [id], onDelete: Cascade)
  post         Thread?     @relation("PostNotifications", fields: [parentIdPost], references: [id], onDelete: Cascade)
}

model Thread {
  id            String         @id @default(uuid())
  text          String         @db.Char(255)
  parentId      String?
  userId        String
  imageUrl      String?
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent        Thread?        @relation("RepliesTo", fields: [parentId], references: [id], onDelete: Cascade)
  replies       Thread[]       @relation("RepliesTo")
  likes         Like[]         @relation("PostLikes")
  bookmarks     Bookmark[]
  notifications Notification[] @relation("PostNotifications")
}

model Like {
  id       String @id @default(uuid())
  userId   String
  threadId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread   Thread @relation("PostLikes", fields: [threadId], references: [id], onDelete: Cascade)

  @@index([userId, threadId])
}

model Bookmark {
  id       String @id @default(uuid())
  userId   String
  threadId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([userId, threadId])
}

enum ActionType {
  Follow
  Like
  Comment
  Reply
}

enum ParentType {
  User
  Post
}
